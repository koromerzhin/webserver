name: CI Pipeline

on: 
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_INTERACTIVE: false
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  STACK_NAME: webserver
  DOCKER_COMPOSE_VERSION: '2.29.7'
  # Optimisations npm
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  # Optimisations Docker
  DOCKER_CLI_EXPERIMENTAL: enabled

permissions:
  contents: read
  packages: read

jobs:
  ci:
    name: CI Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Setup Task
        uses: go-task/setup-task@v1

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
            if [ ! -d node_modules ]; then
                npm install
            fi

      - name: Install and validate dependencies
        run: |
          echo "üì¶ Installation et validation des d√©pendances..."
          npm run lint:markdown
          echo "‚úÖ D√©pendances install√©es et valid√©es"

      - name: Initialize Docker environment
        run: |
          echo "üê≥ Initialisation de l'environnement Docker..."
          task webserver:swarm-init
          task webserver:create-network
          task webserver:getpull-image
          task webserver:deploy
          task webserver:waiting
          echo "‚úÖ Stack d√©ploy√©e"